---
auto_light_on:
  mode: parallel
  sequence:
    - action: light.turn_on
      data:
        entity_id: "{{ auto_entity }}"
        brightness: "{{ brightness }}"

    - action: script.turn_on
      data:
        entity_id: script.auto_off
        variables:
          auto_entity: "{{ auto_entity }}"
          duration_seconds: "{{ duration_seconds }}"

auto_switch_on:
  mode: parallel
  sequence:
    - action: switch.turn_on
      data:
        entity_id: "{{ auto_entity }}"
    - action: script.turn_on
      data:
        entity_id: script.auto_off
        variables:
          auto_entity: "{{ auto_entity }}"
          duration_seconds: "{{ duration_seconds }}"

auto_off:
  mode: parallel
  sequence:
    - delay:
        seconds: "{{ duration_seconds }}"
    - condition: template
      value_template: >-
        {{ as_timestamp(now())
           -
           as_timestamp(states[auto_entity].last_changed)
           >=
           duration_seconds|int - 10 }}
    - action: homeassistant.turn_off
      data:
        entity_id: "{{ auto_entity }}"

lights_off_except:
  fields:
    exclude_lights:
      description: "Excluded lights as list"
  sequence:
    - action: homeassistant.turn_off
      data:
        entity_id: >-
          {{ (states.light|list + expand('group.all_light_switches')) |
             rejectattr('entity_id','in', exclude_lights ) |
             rejectattr('state','in','unavailable') |
             map(attribute='entity_id') | list | join(', ') }}

remote_action:
  fields:
    owner:
      description: "The sender of the action"
      example: "Cath"
    service:
      description: "The service to call"
      example: "light.turn_on"
    entity_id:
      description: "The target of the action"
      example: "light.kitchen"
    message:
      description: "The content of the notification"
      example: "turning on the kitchen light"
  mode: parallel
  sequence:
    - action: "{{ service }}"
      data:
        entity_id: "{{ entity_id }}"
    - if:
        - "{{ message != '' }}"
      then:
        - action: notify.{{ owner }}
          data:
            message: "{{ message }}"

notify_and_speak:
  fields:
    message:
      description: "The content of the text and voice notification"
      example: "Hello everyone!"
  mode: queued
  sequence:
    - action: notify.all_people
      data:
        message: "{{ message }}"
    - action: media_player.volume_set
      entity_id:
        - media_player.kitchen
        - media_player.bedroom
      data:
        volume_level: 0.2
    - action: tts.google_translate_say
      entity_id:
        - media_player.kitchen
        - media_player.bedroom
      data:
        message: "{{ message }}"
        language: "fr"
